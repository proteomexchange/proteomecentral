#!/usr/local/bin/perl -w

use strict;

use FindBin;
use lib "$FindBin::Bin/../lib/perl";

use ProteomeXchange::Dataset;

my $HTML_BASE_DIR = "/local/wwwspecial/proteomecentral";

$| = 1;

use CGI;
my $cgi = new CGI;

my $response;
$response->{result} = "ERROR";
$response->{message} = "ERROR: Unhandled exception E001";
my @tmp = ( 'Dataset service received request' );
$response->{info} = \@tmp;

my $params;

my @parameters = qw ( query PXPartner authentication method ProteomeXchangeXML reprocessed noDatabaseUpdate noEmailBroadcast test verbose );

#### Extract CGI parameters
foreach my $parameter ( @parameters ) {
  if ($cgi->param($parameter)) {
    $params->{$parameter} = $cgi->param($parameter);
	push(@{$response->{info}},"Found input parameter $parameter='$params->{$parameter}'") if ($cgi->param('verbose'));
  }
}

#### Also extract command-line parameters, useful for testing
foreach my $arg ( @ARGV ) {
  if ( $arg =~ /(\S+)=(\S+)/) {
    my $key = $1;
    my $value = $2;
    my $isValidParameter = 0;
    foreach my $parameter ( @parameters ) {
      if ($key eq $parameter) {
	$params->{$parameter} = $value;
	push(@{$response->{info}},"Found input parameter $key='$value'");
	$isValidParameter = 1;
      }
    }

    #### Check to make sure the parameter was known
    unless ($isValidParameter) {
      $response->{result} = "ERROR";
      $response->{message} = "ERROR: Specified parameter '$key' is not recognized";
      sendResponse(response=>$response);
    }

  } else {
    $response->{result} = "ERROR";
    $response->{message} = "ERROR: Unable to parse parameter '$arg'";
    sendResponse(response=>$response);
  }

}


$response->{verbose} = $params->{verbose};

#### Determine the requested method
unless ($params->{method}) {
  $response->{result} = "ERROR";
  $response->{message} = "ERROR: No method was specified";
  sendResponse(response=>$response);
}

#### Handle status method
if ($params->{method} eq 'serverStatus') {
  showStatus(params=>$params,response=>$response);
}

#### Handle requestID method
if ($params->{method} eq 'requestID') {
  requestID(params=>$params,response=>$response);
}

#### Handle testAuthorization method
if ($params->{method} eq 'testAuthorization') {
  testAuthorization(params=>$params,response=>$response);
  sendResponse(response=>$response);
  exit;
}

#### Handle submitDataset method
if ($params->{method} eq 'submitDataset') {
  handleDataset(params=>$params,response=>$response,method=>$params->{method});
}

#### Handle validateXML method
if ($params->{method} eq 'validateXML') {
  handleDataset(params=>$params,response=>$response,method=>$params->{method});
}

#### Handle setSupplementalFullDatasetLinkList method
if ($params->{method} eq 'setSupplementalFullDatasetLinkList') {
  handleDataset(params=>$params,response=>$response,method=>$params->{method});
}

#### Handle codetest method. Used only for special debugging purposes
if ($params->{method} eq 'codetest') {
  $response = loadAuthorizations();
  sendResponse(response=>$response);
  exit;
}


#### Otherwise an invalid method was sent
$response->{result} = "ERROR";
$response->{message} = "ERROR: Invalid method '$params->{method}' was sent";
sendResponse(response=>$response);

exit;


###############################################################################
# sendResponse
###############################################################################
sub sendResponse {
  my %args = @_;
  my $SUB_NAME = 'sendResponse';

  #### Decode the argument list
  my $response = $args{'response'} || die("[$SUB_NAME] ERROR: response not passed");

  print "Content-type: text/plain\n\n";

  my $buffer = '';

  $buffer .= "result=$response->{result}\n";
  $buffer .= "message=$response->{message}\n" if ($response->{result});
  $buffer .= "identifier=$response->{identifier}\n" if ($response->{identifier});

  if ($response->{info}) {
    foreach my $line (@{$response->{info}}) {
      $buffer .= "info=$line\n";
	  }
  }
  ## print out things parsed from xml
  if ( 0 && $response->{dataset} ){
     $buffer .= "\n\nInformation parsed from xml file:\n";
     foreach my $key (keys %{$response->{dataset}}){
       $buffer .= "$key=$response->{dataset}{$key}\n";
     } 
  }

  #### Send the output of the buffer to stdout
  print $buffer;

  #### Also write the response to a log file for later examination
  if (open(OUTFILE,">>/net/dblocal/wwwspecial/proteomecentral/log/Dataset.log")) {
    print OUTFILE "==========================================================================\n";
    print OUTFILE `date`;
    print OUTFILE $buffer;
    close OUTFILE;
  }

  exit;
}


###############################################################################
# showStatus
###############################################################################
sub showStatus {
  my %args = @_;
  my $SUB_NAME = 'showStatus';

  #### Decode the argument list
  my $params = $args{'params'} || die("[$SUB_NAME] ERROR: params not passed");
  my $response = $args{'response'} || die("[$SUB_NAME] ERROR: response not passed");

  $response->{result} = "SUCCESS";
  $response->{message} = "Server is up. No errors.";
  sendResponse(response=>$response);

  exit;
}


###############################################################################
# authorize
###############################################################################
sub authorize {
  my %args = @_;
  my $SUB_NAME = 'authorize';

  #### Decode the argument list
  my $params = $args{'params'} || die("[$SUB_NAME] ERROR: params not passed");
  my $response = $args{'response'} || die("[$SUB_NAME] ERROR: response not passed");

  my $authorization;
  $authorization->{result} = "FAILED";
  $authorization->{message} = "ERROR: Authorization failed with unspecified error E0002";
  $authorization->{info} = [ "Attempting to authorize input" ];

  my %requesters;
  push(@{$response->{info}},"Loading permitted authorization information");
  my $authorizations = loadAuthorizations();
  if ($authorizations->{result} eq 'SUCCESS') {
    %requesters = %{$authorizations->{authorizations}};
  } else {
    $authorization->{message} = "ERROR: Failed to load authorizations";
    return($authorization);
  }

  if (defined($params->{PXPartner}) && defined($params->{authentication})) {
    if (exists($requesters{$params->{PXPartner}})) {
      if ($params->{authentication} eq $requesters{$params->{PXPartner}}->{password}) {
        $authorization->{result} = "SUCCESS";
        $authorization->{message} = "Authorization succeeded";
	push(@{$response->{info}},"Authorization succeeded");
	$authorization->{testLevel} = $requesters{$params->{PXPartner}}->{testLevel};
      } else {
        $authorization->{result} = "FAILED";
        $authorization->{message} = "ERROR: Incorrect authentication for specified PXPartner";
      }
    } else {
      $authorization->{result} = "FAILED";
      $authorization->{message} = "ERROR: Unauthorized PXPartner '$params->{PXPartner}' specified";
	}
  } else {
    $authorization->{result} = "FAILED";
    $authorization->{message} = "ERROR: To authorize, both a PXPartner and authentication must be specified";
  }

  return($authorization);
}


###############################################################################
# requestID
###############################################################################
sub requestID {
  my %args = @_;
  my $SUB_NAME = 'requestID';

  #### Decode the argument list
  my $params = $args{'params'} || die("[$SUB_NAME] ERROR: params not passed");
  my $response = $args{'response'} || die("[$SUB_NAME] ERROR: response not passed");

  #### Verify the authorization
  my $authorization = authorize(params=>$params,response=>$response);

  #### If authorization succeeded, furnish a new identifier
  if ($authorization->{result} eq 'SUCCESS') {
    #### Make sure this is not a user that always has to be test mode
    if ($authorization->{testLevel} && $authorization->{testLevel} eq 'production' && ( $params->{test} =~ /^no$/i || $params->{test} =~ /^false$/i ) ) {
      $params->{test} = 'no';
    } else {
      $params->{test} = 'yes';
      push(@{$response->{info}},"Operating in test mode. ID will be a test ID");
    }

    my $dataset = new ProteomeXchange::Dataset;
    $dataset->setPXPartner($params->{PXPartner});
    #### For testing $response->{message} = "Would get new identifier in with test: $params->{test}";
    $response = $dataset->createNewIdentifier(
      test=>$params->{test},
      reprocessed=>$params->{reprocessed},
      response=>$response
    );
  #### If authorization failed, return the authorization error message
  } else {
    $response->{message} = $authorization->{message};
  }

  #### Return the response
  sendResponse(response=>$response);
  exit;
}


###############################################################################
# testAuthorization
###############################################################################
sub testAuthorization {
  my %args = @_;
  my $SUB_NAME = 'testAuthorization';

  #### Decode the argument list
  my $params = $args{'params'} || die("[$SUB_NAME] ERROR: params not passed");

  #### Verify the authorization
  push(@{$response->{info}},"Testing authorization for supplied parameters");
  my $authorization = authorize(params=>$params,response=>$response);

  #### If authorization succeeded, furnish a new identifier
  if ($authorization->{result} eq 'SUCCESS') {
    $response->{message} = 'Authorization succeeded';
    push(@{$response->{info}},"This authorized user may operate in $authorization->{testLevel} mode");
  } else {
    $response->{result} = $authorization->{result};
    $response->{message} = $authorization->{message};
    push(@{$response->{info}},@{$authorization->{info}});
  }

  #### Return the response
  sendResponse(response=>$response);
  exit;
}


###############################################################################
# handleDataset
###############################################################################
sub handleDataset {
  my %args = @_;
  my $SUB_NAME = 'handleDataset';

  #### Decode the argument list
  my $params = $args{'params'} || die("[$SUB_NAME] ERROR: params not passed");
  my $response = $args{'response'} || die("[$SUB_NAME] ERROR: response not passed");
  my $test = $params->{test};
  my $method = $args{'method'} || die("[$SUB_NAME] ERROR: method not passed");

  #### 2015-10-22 EWD: Put this header print much earlier for dubegging mostly, so that some accidental output doesn't cause an error
  #### 2015-12-08 EWD: Figured out the problem. Removed again.
  #print "Content-type: text/plain\n\n";


  #### Configure the location of where the uploaded file will go
  my $path = '/local/wwwspecial/proteomecentral/var/submissions';
  #### supplementalFullDatasetLinkList has its own subdirectory
  if ($method eq 'setSupplementalFullDatasetLinkList') {
    $path .= "/supplementalFullDatasetLinkList";
  }
  #### validateXML has its own subdirectory whether testing or not
  if ($method eq 'validateXML') {
    $path .= "/validateOnly";
  #### Either the main submission or supplementalFullDatasetLinkList have a further testing subdirectory
  } elsif ($test && ($test =~ /yes/i || $test =~ /true/i)) {
    $path .= "/testing";
  }
  push(@{$response->{info}},"Will store incoming file in $path");


  #### Verify the authorization
  my $authorization = authorize(params=>$params,response=>$response);


  #### If authorization succeeded, receive and process the xml file
  if ($authorization->{result} eq 'SUCCESS') {
    my $fh = $cgi->upload('ProteomeXchangeXML');
    if ( ! $fh ){
     ## try open file
      open ($fh , "<$params->{'ProteomeXchangeXML'}");
    }

    if ($fh) {
      my $byteCount = 0;
      my $buffer = '';
      my $xml = '';
      while (read($fh, $buffer, 1024)) {
	$byteCount += length($buffer);
	$xml .= $buffer;
	if ($byteCount > 50000000) {
	  $response->{result} = "ERROR";
	  $response->{message} = "Exceeded maximum filesize for ProteomeXchangeXML";
	  last;
	}
      }

      if ($byteCount < 50000000) {
	$response->{result} = "SUCCESS";
	$response->{message} = "Submission received with $byteCount bytes of content";

	#### Write the XML file to a store and process the result
	my $attempts = 0;
	my $uploadFilename;
        use Time::HiRes qw(time);
        use POSIX qw(strftime);

	while ($attempts < 5) {
          my $t = time;
          my $datestr = strftime "%Y-%m-%d_%H:%M:%S", localtime $t;
          $datestr .= sprintf ".%03d", ($t-int($t))*1000; # without rounding
	  $datestr =~ s/ /0/g;
	  my $filename = "Submission_$datestr.xml";
	  if (-e "$path/$filename") {
	    #### Name collision!
	    $attempts++;
	    sleep(1*$attempts);
	  } else {
	    if (open(OUTFILE,">$path/$filename")) {
	      print OUTFILE $xml;
	      $uploadFilename = $filename;
	      close(OUTFILE);
	      last;
	    } else {
	      $response->{result} = "ERROR";
	      $response->{message} = "Internal error: Unable to store submission file. Please contact administrators.";
	      last;
	    }
	  }

	} # end while

	#### The file was successfully stored. Figure out what to do
	if ($uploadFilename) {
	  if ( $method eq "setSupplementalFullDatasetLinkList" ) {
	    my $dataset = new ProteomeXchange::Dataset;
	    $response = $dataset->processSupplementalFullDatasetLinkList(
	      method => $method,
	      path => $path,
	      params => $params,
	      response => $response,
	      uploadFilename => $uploadFilename,
	    );
	  } else {
	    my $dataset = new ProteomeXchange::Dataset;
	    $response = $dataset->processAnnouncement(
	      method => $method,
	      path => $path,
	      params => $params,
	      response => $response,
	      uploadFilename => $uploadFilename,
	    );
	  }
	}

      } else {
	$response->{result} = "ERROR";
	$response->{message} = "Submission file is too large";
      }

    #### If there doesn't seem to be a filehandle to download with, fail
    } else {
      $response->{result} = "ERROR";
      $response->{message} = "Unable to receive ProteomeXchangeXML";
    }

  #### If authorization failed, return the authorization error message
  } else {
    $response->{message} = $authorization->{message};
  }

  #### Return the response

  if (defined $response->{'link'} and $response->{'link'} =~ /http/){
    my $q = new CGI;
    #print $q -> redirect($response->{'link'});
    $response->{result} = "SUCCESS";
    $response->{message} = '';
    sendResponse(response=>$response);  
  }else{
    sendResponse(response=>$response);
  }
  exit;
}


###############################################################################
# loadAuthorizations
###############################################################################
sub loadAuthorizations {
  my %args = @_;
  my $SUB_NAME = 'loadAuthorizations';

  my $authorizations;

  $response->{result} = 'FAILED';
  $response->{message} = 'ERROR: LA001: Unable to load authorizations for this site';

  my $authorizationsFile = "$HTML_BASE_DIR/lib/authorizations.txt";

  #### Try to open and read the local authorizations file
  unless ( -f $authorizationsFile ) {
    $response->{message} = 'ERROR: LA002: Authorizations file not found';
    sendResponse(response=>$response);
    exit;
  }

  unless ( open(INFILE,$authorizationsFile ) ) {
    $response->{message} = 'ERROR: LA003: Unable to open Authorizations file for read';
    sendResponse(response=>$response);
    exit;
  }

  #### Store the authorizations
  while (my $line = <INFILE>) {
    $line =~ s/[\r\n]//g;
    my ($name,$password,$testLevel) = split(/\t/,$line);

    #### Check that there isn't a duplicate entry
    if ($authorizations->{$name}) {
      $response->{message} = "ERROR: LA004: Duplicate authorization in Authorizations";
      sendResponse(response=>$response);
      exit;
    }

    #### Store the password if it is present
    if ($password) {
      $authorizations->{$name}->{password} = $password;
    } else {
      $response->{message} = "ERROR: LA005: Missing password for authorization of $name";
      sendResponse(response=>$response);
      exit;
    }

    #### Store the test level if it is present
    if ($testLevel) {
      $authorizations->{$name}->{testLevel} = $testLevel;
    } else {
      $response->{message} = "ERROR: LA006: Missing testLevel for authorization of $name";
      sendResponse(response=>$response);
      exit;
    }

    ##push(@{$response->{info}},"Added authorized user $name with password $password and testLevel=$testLevel");
  }

  #### Close and prepare the response
  close(INFILE);
  $response->{result} = 'SUCCESS';
  $response->{message} = 'Authorizations file successfully read';
  $response->{authorizations} = $authorizations;

  #### Return the response
  return($response);
}

