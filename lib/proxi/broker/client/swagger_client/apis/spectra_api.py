# coding: utf-8

"""
    Proteomics Expression Interface

    [Proteomics eXpression Interface](https://github.com/HUPO-PSI/proxi-schemas/)

    OpenAPI spec version: 0.1.1
    Contact: yperez@ebi.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SpectraApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_ps_ms(self, result_type, **kwargs):
        """
        Get a collection of peptide spectrum matches
        Get specific Peptide Spectrum Matches (PSMs) if they are present in the database and have been identified by a previous experiment in the resource.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ps_ms(result_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str result_type: Type of the object to be retrieved Compact or Full dataset (required)
        :param int page_size: How many items to return at one time (default 100, max 100)
        :param int page_number: Current page to be shown paged psms (default page 1)
        :param str usi: Universal Spectrum Identifier (USI)
        :param str accession: Dataset accession
        :param str msrun: MsRun containing the spetra
        :param str file_name: FileName containing the spectra
        :param str scan: Scan to be search
        :param bool pass_threshold: the PSM pass the thorsholds of the repository (e.g. FDR thresholds)
        :param str peptide_sequence: peptideSequence allows to retrieve all the PSMs for an specific Peptide Sequence including modified and un-modified previous.
        :param str protein_accession: Protein Accession for the identified peptide
        :param int charge: charge state for the PSM
        :param str modification: modification found in the peptide. For example, to query all peptides that are oxidated.
        :param str peptidoform: Peptidform specific including PTM localizations, it will only retrieve the specific PSMs.
        :return: list[Psm]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_ps_ms_with_http_info(result_type, **kwargs)
        else:
            (data) = self.get_ps_ms_with_http_info(result_type, **kwargs)
            return data

    def get_ps_ms_with_http_info(self, result_type, **kwargs):
        """
        Get a collection of peptide spectrum matches
        Get specific Peptide Spectrum Matches (PSMs) if they are present in the database and have been identified by a previous experiment in the resource.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ps_ms_with_http_info(result_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str result_type: Type of the object to be retrieved Compact or Full dataset (required)
        :param int page_size: How many items to return at one time (default 100, max 100)
        :param int page_number: Current page to be shown paged psms (default page 1)
        :param str usi: Universal Spectrum Identifier (USI)
        :param str accession: Dataset accession
        :param str msrun: MsRun containing the spetra
        :param str file_name: FileName containing the spectra
        :param str scan: Scan to be search
        :param bool pass_threshold: the PSM pass the thorsholds of the repository (e.g. FDR thresholds)
        :param str peptide_sequence: peptideSequence allows to retrieve all the PSMs for an specific Peptide Sequence including modified and un-modified previous.
        :param str protein_accession: Protein Accession for the identified peptide
        :param int charge: charge state for the PSM
        :param str modification: modification found in the peptide. For example, to query all peptides that are oxidated.
        :param str peptidoform: Peptidform specific including PTM localizations, it will only retrieve the specific PSMs.
        :return: list[Psm]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result_type', 'page_size', 'page_number', 'usi', 'accession', 'msrun', 'file_name', 'scan', 'pass_threshold', 'peptide_sequence', 'protein_accession', 'charge', 'modification', 'peptidoform']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ps_ms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result_type' is set
        if ('result_type' not in params) or (params['result_type'] is None):
            raise ValueError("Missing the required parameter `result_type` when calling `get_ps_ms`")

        resource_path = '/psms'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'result_type' in params:
            query_params['resultType'] = params['result_type']
        if 'usi' in params:
            query_params['usi'] = params['usi']
        if 'accession' in params:
            query_params['accession'] = params['accession']
        if 'msrun' in params:
            query_params['msrun'] = params['msrun']
        if 'file_name' in params:
            query_params['fileName'] = params['file_name']
        if 'scan' in params:
            query_params['scan'] = params['scan']
        if 'pass_threshold' in params:
            query_params['passThreshold'] = params['pass_threshold']
        if 'peptide_sequence' in params:
            query_params['peptideSequence'] = params['peptide_sequence']
        if 'protein_accession' in params:
            query_params['proteinAccession'] = params['protein_accession']
        if 'charge' in params:
            query_params['charge'] = params['charge']
        if 'modification' in params:
            query_params['modification'] = params['modification']
        if 'peptidoform' in params:
            query_params['peptidoform'] = params['peptidoform']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Psm]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_spectra(self, result_type, **kwargs):
        """
        Get a collection of spectra
        This endpoint returns a collection of spectra for a given query including a usi.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_spectra(result_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str result_type: Type of the object to be retrieved Compact or Full dataset (required)
        :param int page_size: How many items to return at one time (default 100, max 100)
        :param int page_number: Current page to be shown paged datasets (default page 1)
        :param str usi: Universal Spectrum Identifier (USI)
        :param str accession: Dataset accession
        :param str ms_run: MsRun containing the spectra
        :param str file_name: FileName containing the spectra
        :param str scan: Scan to be searched
        :return: list[Spectrum]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_spectra_with_http_info(result_type, **kwargs)
        else:
            (data) = self.get_spectra_with_http_info(result_type, **kwargs)
            return data

    def get_spectra_with_http_info(self, result_type, **kwargs):
        """
        Get a collection of spectra
        This endpoint returns a collection of spectra for a given query including a usi.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_spectra_with_http_info(result_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str result_type: Type of the object to be retrieved Compact or Full dataset (required)
        :param int page_size: How many items to return at one time (default 100, max 100)
        :param int page_number: Current page to be shown paged datasets (default page 1)
        :param str usi: Universal Spectrum Identifier (USI)
        :param str accession: Dataset accession
        :param str ms_run: MsRun containing the spectra
        :param str file_name: FileName containing the spectra
        :param str scan: Scan to be searched
        :return: list[Spectrum]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result_type', 'page_size', 'page_number', 'usi', 'accession', 'ms_run', 'file_name', 'scan']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spectra" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result_type' is set
        if ('result_type' not in params) or (params['result_type'] is None):
            raise ValueError("Missing the required parameter `result_type` when calling `get_spectra`")

        resource_path = '/spectra'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'result_type' in params:
            query_params['resultType'] = params['result_type']
        if 'usi' in params:
            query_params['usi'] = params['usi']
        if 'accession' in params:
            query_params['accession'] = params['accession']
        if 'ms_run' in params:
            query_params['msRun'] = params['ms_run']
        if 'file_name' in params:
            query_params['fileName'] = params['file_name']
        if 'scan' in params:
            query_params['scan'] = params['scan']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Spectrum]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
