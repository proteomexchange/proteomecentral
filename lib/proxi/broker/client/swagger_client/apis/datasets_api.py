# coding: utf-8

"""
    Proteomics Expression Interface

    [Proteomics eXpression Interface](https://github.com/HUPO-PSI/proxi-schemas/)

    OpenAPI spec version: 0.1.1
    Contact: yperez@ebi.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DatasetsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_dataset(self, identifier, **kwargs):
        """
        Get an specific dataset
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_dataset(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier: Identifier of the dataset (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_dataset_with_http_info(identifier, **kwargs)
        else:
            (data) = self.get_dataset_with_http_info(identifier, **kwargs)
            return data

    def get_dataset_with_http_info(self, identifier, **kwargs):
        """
        Get an specific dataset
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_dataset_with_http_info(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier: Identifier of the dataset (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_dataset`")

        resource_path = '/datasets/{identifier}'.replace('{format}', 'json')
        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Dataset',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_datasets(self, result_type, **kwargs):
        """
        List of datasets in the respository
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_datasets(result_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str result_type: Type of the object to be retrieve Compact or Full dataset (required)
        :param int page_size: How many items to return at one time (default 100, max 100)
        :param int page_number: Current page to be shown paged datasets (default page 1)
        :param str species: Filter the list of Datasets by Species, multiple species search can be performed by [human, mouse].
        :param str accession: Filter the list of datasets by Dataset accession, multiple accessions search can be performed by [PXD00001, PXD00002]
        :param str instrument: Filter the list of datasets by Instrument, multiple instruments search can be performed by [LTQ, QTOF]
        :param str contact: Filter the list of datasets by Contact information
        :param str publication: Filter the list of datasets by Publication information, multiple information search can be performed by [nature methods, 27498275]
        :param str modification: Filter the list of datasets by Modification information.
        :param str search: Search different keywords into all dataset fields, multiple terms search can be performed by [liver, brain]
        :return: list[Dataset]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_datasets_with_http_info(result_type, **kwargs)
        else:
            (data) = self.list_datasets_with_http_info(result_type, **kwargs)
            return data

    def list_datasets_with_http_info(self, result_type, **kwargs):
        """
        List of datasets in the respository
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_datasets_with_http_info(result_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str result_type: Type of the object to be retrieve Compact or Full dataset (required)
        :param int page_size: How many items to return at one time (default 100, max 100)
        :param int page_number: Current page to be shown paged datasets (default page 1)
        :param str species: Filter the list of Datasets by Species, multiple species search can be performed by [human, mouse].
        :param str accession: Filter the list of datasets by Dataset accession, multiple accessions search can be performed by [PXD00001, PXD00002]
        :param str instrument: Filter the list of datasets by Instrument, multiple instruments search can be performed by [LTQ, QTOF]
        :param str contact: Filter the list of datasets by Contact information
        :param str publication: Filter the list of datasets by Publication information, multiple information search can be performed by [nature methods, 27498275]
        :param str modification: Filter the list of datasets by Modification information.
        :param str search: Search different keywords into all dataset fields, multiple terms search can be performed by [liver, brain]
        :return: list[Dataset]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result_type', 'page_size', 'page_number', 'species', 'accession', 'instrument', 'contact', 'publication', 'modification', 'search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_datasets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result_type' is set
        if ('result_type' not in params) or (params['result_type'] is None):
            raise ValueError("Missing the required parameter `result_type` when calling `list_datasets`")

        resource_path = '/datasets'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'result_type' in params:
            query_params['resultType'] = params['result_type']
        if 'species' in params:
            query_params['species'] = params['species']
        if 'accession' in params:
            query_params['accession'] = params['accession']
        if 'instrument' in params:
            query_params['instrument'] = params['instrument']
        if 'contact' in params:
            query_params['contact'] = params['contact']
        if 'publication' in params:
            query_params['publication'] = params['publication']
        if 'modification' in params:
            query_params['modification'] = params['modification']
        if 'search' in params:
            query_params['search'] = params['search']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Dataset]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
