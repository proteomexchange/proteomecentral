# coding: utf-8

"""
    Proteomics Expression Interface

    [Proteomics eXpression Interface](https://github.com/HUPO-PSI/proxi-schemas/)

    OpenAPI spec version: 0.1.1
    Contact: yperez@ebi.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Spectrum(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, usi=None, accession=None, status=None, mzs=None, intensities=None, interpretations=None, attributes=None):
        """
        Spectrum - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'usi': 'str',
            'accession': 'str',
            'status': 'str',
            'mzs': 'list[float]',
            'intensities': 'list[float]',
            'interpretations': 'list[str]',
            'attributes': 'list[OntologyTerm]'
        }

        self.attribute_map = {
            'usi': 'usi',
            'accession': 'accession',
            'status': 'status',
            'mzs': 'mzs',
            'intensities': 'intensities',
            'interpretations': 'interpretations',
            'attributes': 'attributes'
        }

        self._usi = usi
        self._accession = accession
        self._status = status
        self._mzs = mzs
        self._intensities = intensities
        self._interpretations = interpretations
        self._attributes = attributes

    @property
    def usi(self):
        """
        Gets the usi of this Spectrum.
        Universal Spectrum Identifier

        :return: The usi of this Spectrum.
        :rtype: str
        """
        return self._usi

    @usi.setter
    def usi(self, usi):
        """
        Sets the usi of this Spectrum.
        Universal Spectrum Identifier

        :param usi: The usi of this Spectrum.
        :type: str
        """

        self._usi = usi

    @property
    def accession(self):
        """
        Gets the accession of this Spectrum.
        Local identifier specific to the provider

        :return: The accession of this Spectrum.
        :rtype: str
        """
        return self._accession

    @accession.setter
    def accession(self, accession):
        """
        Sets the accession of this Spectrum.
        Local identifier specific to the provider

        :param accession: The accession of this Spectrum.
        :type: str
        """

        self._accession = accession

    @property
    def status(self):
        """
        Gets the status of this Spectrum.
        Status of the Spectrum

        :return: The status of this Spectrum.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Spectrum.
        Status of the Spectrum

        :param status: The status of this Spectrum.
        :type: str
        """
        allowed_values = ["READABLE", "PEAK UNAVAILABLE"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def mzs(self):
        """
        Gets the mzs of this Spectrum.
        Array of m/z values

        :return: The mzs of this Spectrum.
        :rtype: list[float]
        """
        return self._mzs

    @mzs.setter
    def mzs(self, mzs):
        """
        Sets the mzs of this Spectrum.
        Array of m/z values

        :param mzs: The mzs of this Spectrum.
        :type: list[float]
        """

        self._mzs = mzs

    @property
    def intensities(self):
        """
        Gets the intensities of this Spectrum.
        Array of intensity values corresponding to mzs

        :return: The intensities of this Spectrum.
        :rtype: list[float]
        """
        return self._intensities

    @intensities.setter
    def intensities(self, intensities):
        """
        Sets the intensities of this Spectrum.
        Array of intensity values corresponding to mzs

        :param intensities: The intensities of this Spectrum.
        :type: list[float]
        """

        self._intensities = intensities

    @property
    def interpretations(self):
        """
        Gets the interpretations of this Spectrum.
        Array of coded interpretation strings of the peaks, corresponding to mzs

        :return: The interpretations of this Spectrum.
        :rtype: list[str]
        """
        return self._interpretations

    @interpretations.setter
    def interpretations(self, interpretations):
        """
        Sets the interpretations of this Spectrum.
        Array of coded interpretation strings of the peaks, corresponding to mzs

        :param interpretations: The interpretations of this Spectrum.
        :type: list[str]
        """

        self._interpretations = interpretations

    @property
    def attributes(self):
        """
        Gets the attributes of this Spectrum.
        List of ontology terms providing attributes of the spectrum

        :return: The attributes of this Spectrum.
        :rtype: list[OntologyTerm]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this Spectrum.
        List of ontology terms providing attributes of the spectrum

        :param attributes: The attributes of this Spectrum.
        :type: list[OntologyTerm]
        """

        self._attributes = attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
