# coding: utf-8

"""
    Proteomics Expression Interface

    [Proteomics eXpression Interface](https://github.com/HUPO-PSI/proxi-schemas/)

    OpenAPI spec version: 0.1.1
    Contact: yperez@ebi.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Dataset(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, identifiers=None, title=None, description=None, species=None, instruments=None, modifications=None, contacts=None, publications=None, keywords=None, full_dataset_links=None, dataset_files=None):
        """
        Dataset - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'identifiers': 'list[OntologyTerm]',
            'title': 'str',
            'description': 'str',
            'species': 'list[OntologyTermList]',
            'instruments': 'list[OntologyTerm]',
            'modifications': 'list[OntologyTerm]',
            'contacts': 'list[OntologyTermList]',
            'publications': 'list[OntologyTermList]',
            'keywords': 'list[OntologyTerm]',
            'full_dataset_links': 'list[OntologyTerm]',
            'dataset_files': 'list[OntologyTerm]'
        }

        self.attribute_map = {
            'identifiers': 'identifiers',
            'title': 'title',
            'description': 'description',
            'species': 'species',
            'instruments': 'instruments',
            'modifications': 'modifications',
            'contacts': 'contacts',
            'publications': 'publications',
            'keywords': 'keywords',
            'full_dataset_links': 'fullDatasetLinks',
            'dataset_files': 'datasetFiles'
        }

        self._identifiers = identifiers
        self._title = title
        self._description = description
        self._species = species
        self._instruments = instruments
        self._modifications = modifications
        self._contacts = contacts
        self._publications = publications
        self._keywords = keywords
        self._full_dataset_links = full_dataset_links
        self._dataset_files = dataset_files

    @property
    def identifiers(self):
        """
        Gets the identifiers of this Dataset.


        :return: The identifiers of this Dataset.
        :rtype: list[OntologyTerm]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """
        Sets the identifiers of this Dataset.


        :param identifiers: The identifiers of this Dataset.
        :type: list[OntologyTerm]
        """

        self._identifiers = identifiers

    @property
    def title(self):
        """
        Gets the title of this Dataset.


        :return: The title of this Dataset.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Dataset.


        :param title: The title of this Dataset.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this Dataset.


        :return: The description of this Dataset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Dataset.


        :param description: The description of this Dataset.
        :type: str
        """

        self._description = description

    @property
    def species(self):
        """
        Gets the species of this Dataset.


        :return: The species of this Dataset.
        :rtype: list[OntologyTermList]
        """
        return self._species

    @species.setter
    def species(self, species):
        """
        Sets the species of this Dataset.


        :param species: The species of this Dataset.
        :type: list[OntologyTermList]
        """

        self._species = species

    @property
    def instruments(self):
        """
        Gets the instruments of this Dataset.


        :return: The instruments of this Dataset.
        :rtype: list[OntologyTerm]
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """
        Sets the instruments of this Dataset.


        :param instruments: The instruments of this Dataset.
        :type: list[OntologyTerm]
        """

        self._instruments = instruments

    @property
    def modifications(self):
        """
        Gets the modifications of this Dataset.


        :return: The modifications of this Dataset.
        :rtype: list[OntologyTerm]
        """
        return self._modifications

    @modifications.setter
    def modifications(self, modifications):
        """
        Sets the modifications of this Dataset.


        :param modifications: The modifications of this Dataset.
        :type: list[OntologyTerm]
        """

        self._modifications = modifications

    @property
    def contacts(self):
        """
        Gets the contacts of this Dataset.


        :return: The contacts of this Dataset.
        :rtype: list[OntologyTermList]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this Dataset.


        :param contacts: The contacts of this Dataset.
        :type: list[OntologyTermList]
        """

        self._contacts = contacts

    @property
    def publications(self):
        """
        Gets the publications of this Dataset.


        :return: The publications of this Dataset.
        :rtype: list[OntologyTermList]
        """
        return self._publications

    @publications.setter
    def publications(self, publications):
        """
        Sets the publications of this Dataset.


        :param publications: The publications of this Dataset.
        :type: list[OntologyTermList]
        """

        self._publications = publications

    @property
    def keywords(self):
        """
        Gets the keywords of this Dataset.


        :return: The keywords of this Dataset.
        :rtype: list[OntologyTerm]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """
        Sets the keywords of this Dataset.


        :param keywords: The keywords of this Dataset.
        :type: list[OntologyTerm]
        """

        self._keywords = keywords

    @property
    def full_dataset_links(self):
        """
        Gets the full_dataset_links of this Dataset.


        :return: The full_dataset_links of this Dataset.
        :rtype: list[OntologyTerm]
        """
        return self._full_dataset_links

    @full_dataset_links.setter
    def full_dataset_links(self, full_dataset_links):
        """
        Sets the full_dataset_links of this Dataset.


        :param full_dataset_links: The full_dataset_links of this Dataset.
        :type: list[OntologyTerm]
        """

        self._full_dataset_links = full_dataset_links

    @property
    def dataset_files(self):
        """
        Gets the dataset_files of this Dataset.


        :return: The dataset_files of this Dataset.
        :rtype: list[OntologyTerm]
        """
        return self._dataset_files

    @dataset_files.setter
    def dataset_files(self, dataset_files):
        """
        Sets the dataset_files of this Dataset.


        :param dataset_files: The dataset_files of this Dataset.
        :type: list[OntologyTerm]
        """

        self._dataset_files = dataset_files

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
