# coding: utf-8

"""
    Proteomics Expression Interface

    [Proteomics eXpression Interface](https://github.com/HUPO-PSI/proxi-schemas/)

    OpenAPI spec version: 0.1.1
    Contact: yperez@ebi.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Protein(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, protein_accession=None, count_psm=None, count_datasets=None, ptms=None, count_peptides=None, count_unique_peptides=None, count_peptidoforms=None):
        """
        Protein - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'protein_accession': 'str',
            'count_psm': 'int',
            'count_datasets': 'str',
            'ptms': 'list[Modification]',
            'count_peptides': 'int',
            'count_unique_peptides': 'int',
            'count_peptidoforms': 'int'
        }

        self.attribute_map = {
            'protein_accession': 'proteinAccession',
            'count_psm': 'countPSM',
            'count_datasets': 'countDatasets',
            'ptms': 'ptms',
            'count_peptides': 'countPeptides',
            'count_unique_peptides': 'countUniquePeptides',
            'count_peptidoforms': 'countPeptidoforms'
        }

        self._protein_accession = protein_accession
        self._count_psm = count_psm
        self._count_datasets = count_datasets
        self._ptms = ptms
        self._count_peptides = count_peptides
        self._count_unique_peptides = count_unique_peptides
        self._count_peptidoforms = count_peptidoforms

    @property
    def protein_accession(self):
        """
        Gets the protein_accession of this Protein.
        Protein Accession (e.g Q6ZS62)

        :return: The protein_accession of this Protein.
        :rtype: str
        """
        return self._protein_accession

    @protein_accession.setter
    def protein_accession(self, protein_accession):
        """
        Sets the protein_accession of this Protein.
        Protein Accession (e.g Q6ZS62)

        :param protein_accession: The protein_accession of this Protein.
        :type: str
        """

        self._protein_accession = protein_accession

    @property
    def count_psm(self):
        """
        Gets the count_psm of this Protein.
        Number of PSMs that support the current Peptidoform

        :return: The count_psm of this Protein.
        :rtype: int
        """
        return self._count_psm

    @count_psm.setter
    def count_psm(self, count_psm):
        """
        Sets the count_psm of this Protein.
        Number of PSMs that support the current Peptidoform

        :param count_psm: The count_psm of this Protein.
        :type: int
        """

        self._count_psm = count_psm

    @property
    def count_datasets(self):
        """
        Gets the count_datasets of this Protein.
        Number of datasets that support the current Peptidoform

        :return: The count_datasets of this Protein.
        :rtype: str
        """
        return self._count_datasets

    @count_datasets.setter
    def count_datasets(self, count_datasets):
        """
        Sets the count_datasets of this Protein.
        Number of datasets that support the current Peptidoform

        :param count_datasets: The count_datasets of this Protein.
        :type: str
        """

        self._count_datasets = count_datasets

    @property
    def ptms(self):
        """
        Gets the ptms of this Protein.


        :return: The ptms of this Protein.
        :rtype: list[Modification]
        """
        return self._ptms

    @ptms.setter
    def ptms(self, ptms):
        """
        Sets the ptms of this Protein.


        :param ptms: The ptms of this Protein.
        :type: list[Modification]
        """

        self._ptms = ptms

    @property
    def count_peptides(self):
        """
        Gets the count_peptides of this Protein.
        Number of peptides identified for the protein

        :return: The count_peptides of this Protein.
        :rtype: int
        """
        return self._count_peptides

    @count_peptides.setter
    def count_peptides(self, count_peptides):
        """
        Sets the count_peptides of this Protein.
        Number of peptides identified for the protein

        :param count_peptides: The count_peptides of this Protein.
        :type: int
        """

        self._count_peptides = count_peptides

    @property
    def count_unique_peptides(self):
        """
        Gets the count_unique_peptides of this Protein.
        Number of unique peptides identified for the protein

        :return: The count_unique_peptides of this Protein.
        :rtype: int
        """
        return self._count_unique_peptides

    @count_unique_peptides.setter
    def count_unique_peptides(self, count_unique_peptides):
        """
        Sets the count_unique_peptides of this Protein.
        Number of unique peptides identified for the protein

        :param count_unique_peptides: The count_unique_peptides of this Protein.
        :type: int
        """

        self._count_unique_peptides = count_unique_peptides

    @property
    def count_peptidoforms(self):
        """
        Gets the count_peptidoforms of this Protein.
        Number of peptidoforms identified for the protein

        :return: The count_peptidoforms of this Protein.
        :rtype: int
        """
        return self._count_peptidoforms

    @count_peptidoforms.setter
    def count_peptidoforms(self, count_peptidoforms):
        """
        Sets the count_peptidoforms of this Protein.
        Number of peptidoforms identified for the protein

        :param count_peptidoforms: The count_peptidoforms of this Protein.
        :type: int
        """

        self._count_peptidoforms = count_peptidoforms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
