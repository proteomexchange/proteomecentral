# coding: utf-8

"""
    Proteomics Expression Interface

    [Proteomics eXpression Interface](https://github.com/HUPO-PSI/proxi-schemas/)

    OpenAPI spec version: 0.1.1
    Contact: yperez@ebi.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Modification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, accession=None, position=None, scores=None):
        """
        Modification - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'accession': 'str',
            'position': 'int',
            'scores': 'list[OntologyTerm]'
        }

        self.attribute_map = {
            'accession': 'accession',
            'position': 'position',
            'scores': 'scores'
        }

        self._accession = accession
        self._position = position
        self._scores = scores

    @property
    def accession(self):
        """
        Gets the accession of this Modification.
        accession of the PTM (e.g UNIMOD-35, or CHEMOD:+35.00)

        :return: The accession of this Modification.
        :rtype: str
        """
        return self._accession

    @accession.setter
    def accession(self, accession):
        """
        Sets the accession of this Modification.
        accession of the PTM (e.g UNIMOD-35, or CHEMOD:+35.00)

        :param accession: The accession of this Modification.
        :type: str
        """

        self._accession = accession

    @property
    def position(self):
        """
        Gets the position of this Modification.
        position in the aminoacid sequence

        :return: The position of this Modification.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this Modification.
        position in the aminoacid sequence

        :param position: The position of this Modification.
        :type: int
        """

        self._position = position

    @property
    def scores(self):
        """
        Gets the scores of this Modification.


        :return: The scores of this Modification.
        :rtype: list[OntologyTerm]
        """
        return self._scores

    @scores.setter
    def scores(self, scores):
        """
        Sets the scores of this Modification.


        :param scores: The scores of this Modification.
        :type: list[OntologyTerm]
        """

        self._scores = scores

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
