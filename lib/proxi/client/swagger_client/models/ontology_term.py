# coding: utf-8

"""
    Proteomics Expression Interface

    [Proteomics eXpression Interface](https://github.com/HUPO-PSI/proxi-schemas/)

    OpenAPI spec version: 0.1.1
    Contact: yperez@ebi.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OntologyTerm(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, accession=None, name=None, value=None, cv_param_group=None, value_accession=None):
        """
        OntologyTerm - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'accession': 'str',
            'name': 'str',
            'value': 'str',
            'cv_param_group': 'str',
            'value_accession': 'str'
        }

        self.attribute_map = {
            'accession': 'accession',
            'name': 'name',
            'value': 'value',
            'cv_param_group': 'cv_param_group',
            'value_accession': 'value_accession'
        }

        self._accession = accession
        self._name = name
        self._value = value
        self._cv_param_group = cv_param_group
        self._value_accession = value_accession

    @property
    def accession(self):
        """
        Gets the accession of this OntologyTerm.


        :return: The accession of this OntologyTerm.
        :rtype: str
        """
        return self._accession

    @accession.setter
    def accession(self, accession):
        """
        Sets the accession of this OntologyTerm.


        :param accession: The accession of this OntologyTerm.
        :type: str
        """

        self._accession = accession

    @property
    def name(self):
        """
        Gets the name of this OntologyTerm.


        :return: The name of this OntologyTerm.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OntologyTerm.


        :param name: The name of this OntologyTerm.
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """
        Gets the value of this OntologyTerm.


        :return: The value of this OntologyTerm.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this OntologyTerm.


        :param value: The value of this OntologyTerm.
        :type: str
        """

        self._value = value

    @property
    def cv_param_group(self):
        """
        Gets the cv_param_group of this OntologyTerm.


        :return: The cv_param_group of this OntologyTerm.
        :rtype: str
        """
        return self._cv_param_group

    @cv_param_group.setter
    def cv_param_group(self, cv_param_group):
        """
        Sets the cv_param_group of this OntologyTerm.


        :param cv_param_group: The cv_param_group of this OntologyTerm.
        :type: str
        """

        self._cv_param_group = cv_param_group

    @property
    def value_accession(self):
        """
        Gets the value_accession of this OntologyTerm.


        :return: The value_accession of this OntologyTerm.
        :rtype: str
        """
        return self._value_accession

    @value_accession.setter
    def value_accession(self, value_accession):
        """
        Sets the value_accession of this OntologyTerm.


        :param value_accession: The value_accession of this OntologyTerm.
        :type: str
        """

        self._value_accession = value_accession

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
