#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../perl";

use JSON;
use XML::Writer;

use HTTP::Request;
use LWP::UserAgent;
use JSON::Parse;

use ProteomeXchange::Dataset;
use ProteomeXchange::DatasetParser;
use ProteomeXchange::ArticleFinder;
use ProteomeXchange::Configuration qw( %CONFIG );

$| = 1;
use CGI qw/:standard/;
my $cgi = new CGI;

our $CGI_BASE_DIR = $cgi->new->url();
$CGI_BASE_DIR =~ s/cgi.*/cgi/;

my $response = {};
$response->{result} = "ERROR";
$response->{message} = "ERROR: Unhandled exception E001";
my @tmp = ( 'Dataset service start' );
$response->{info} = \@tmp;

my $params;

my @parameters = qw ( test verbose ID outputMode detailLevel);
our @page;
use LWP::UserAgent;
use HTTP::Request;
my $ua = LWP::UserAgent->new();

my $articleFinder = new ProteomeXchange::ArticleFinder;

#### Extract CGI parameters
foreach my $parameter ( @parameters ) {
  if ($cgi->param($parameter)) {
    $params->{$parameter} = $cgi->param($parameter);
  	push(@{$response->{info}},"Found input parameter $parameter=$params->{$parameter}") if ($cgi->param('verbose'));
  }
}

my $skinLink = 'http://proteomecentral.proteomexchange.org/template.php';
$response = $ua->request( HTTP::Request->new( GET => "$skinLink" ) );
if ( $response -> is_success()){
  @page = split( "\n", $response->content() );
}else{
  $response->{message} = "unable to open template http://proteomecentral.proteomexchange.org/template.php\n";
  exit;
}

#### Also extract command-line parameters, useful for testing
foreach my $arg ( @ARGV ) {
  if ( $arg =~ /(\S+)=(\S+)/) {
    my $key = $1;
	  my $value = $2;
		foreach my $parameter ( @parameters ) {
			if ($key eq $parameter) {
				$params->{$parameter} = $value;
				push(@{$response->{info}},"Found input parameter $key=$value");
			}
		}
  }# else {
   #  $response->{message} = "ERROR: Unable to parse method line parameter '$arg'\n";
	 #  exit;
  #}
}

$response->{verbose} = $params->{verbose};

my $exceptions = fetchExceptions();

searchUnannouncedDatasets(params=>$params, response=>$response, exceptions=>$exceptions);

searchAnnouncedDatasets(params=>$params,response=>$response, exceptions=>$exceptions);

exit;


###############################################################################
# sendResponse
###############################################################################
sub sendResponse {
  my %args = @_;
  my $SUB_NAME = 'sendResponse';

  #### Decode the argument list
  my $response = $args{'response'} || die("[$SUB_NAME] ERROR: response not passed");

  print "Content-type: text/plain\n\n";

  print "result=$response->{result}\n";
  print "message=$response->{message}\n" if ($response->{result});
  print "identifier=$response->{identifier}\n" if ($response->{identifier});

  #if ($response->{info} && $response->{verbose}) {
  if ($response->{info}) {
    foreach my $line (@{$response->{info}}) {
      print "info=$line\n";
	}
  }
	
  exit;
}


###############################################################################
# searchAnnouncedDatasets
###############################################################################
sub searchAnnouncedDatasets {
  my %args = @_;
  my $SUB_NAME = 'searchAnnouncedDatasets';
   
  #### Decode the argument list
  my $params = $args{'params'}; 
  my $response = $args{'response'} || die("[$SUB_NAME] ERROR: response not passed");
  my $exceptions = $args{'exceptions'}; 

  my $test = $params->{test} || 'no';
  my $outputMode=$params->{outputMode} || 'html';
  my $table_name = 'dataset';
  my $teststr = '';

  if ($test && ($test =~ /yes/i || $test =~ /true/i)){
    $teststr = "&test=$test";
    $table_name = 'dataset_test' 
  }

  my $dbh = new ProteomeXchange::Database;
  my $whereclause = 'WHERE status = "announced"';
  my %hidden_cols = ();
  my @headings = (); 

  my  @column_array =(
        ["datasetIdentifier","Dataset Identifier"],
        ["PXPartner","Repository"],
        ["status","Status"],
        ["primarySubmitter","Primary Submitter"],
        ["labHead", "LabHead"],
        ["title","Title"],
        ["publication","Publication"],
        );

  my $columns_clause =  build_SQL_columns_list(
       	column_array_ref=>\@column_array,
        hidden_cols_ref => \%hidden_cols,
        heading => \@headings);

  my $sql = qq~ select
        $columns_clause 
        from $table_name
        $whereclause
        ORDER BY datasetIdentifier DESC
  ~;

  my @results = $dbh->selectSeveralColumns($sql);

  if ($outputMode =~ /html/i){
    #print "Content-type:text/html\r\n\r\n";
    foreach my $line (@page){

      #### Short circuit the header since we already did one
      next unless ( $line =~ /^<!-- BEGIN main content -->/ );

      if($line =~ /(TEMPLATESUBTITLE|TEMPLATETITLE)/){
	$line =~ s/$1/ProteomeXchange Datasets/;
	print "$line\n";

      } elsif($line =~ /class="node-inner-padding"/){
	#$line =~ s/>/style="padding: 0">/g;
	print "$line\n";

      } elsif ($line =~ /^<!-- BEGIN main content -->/){
	print "$line\n";

	print "<H1>Announced datasets with no listed publication but with a title that brings up a hit in PubMed</H1>\n";

	#### Iterate through the datasets, looking for possible matches
	my $counter = 0;
	my %stats;
	foreach my $values (@results){
	  $counter++;
	  #last if ($counter > 100);
	  #next unless ($values->[0] eq 'PXD000246');

	  if ($values->[6] =~ /href/) {
	    $stats{'Datasets already with an assoctiated PubMed ID'}++;
	    next;
	  }

	  my $buffer ='';


	  $buffer .= "<HR>\n";
	  $buffer .= "<a href=\"http://proteomecentral.proteomexchange.org/dataset/$values->[0]\">$values->[0]</a> \t$values->[6] (from $values->[1])<BR>\n";

	  #print "Searching for $values->[0]: $values->[5]\n";

	  my $searchResult = $articleFinder->findArticle(title=>$values->[5]);

	  my $status = $values->[6] || '';
	  #### If nothing was found
	  my $searchResultYear = $searchResult->{year} || '';
	  if ( $searchResultYear !~ /^\d\d\d\d$/ ) {
	    if ( $searchResultYear =~ /(\d\d\d\d)/ ) {
	      $searchResultYear = $1;
	    } else {
	      $searchResultYear = '0';
	    }
	  }
	  if ( !$searchResult->{message} || $searchResult->{message} eq 'No articles found' || $searchResultYear < 2012) {
	    $stats{"Datasets of status '$status' with no articles found"}++;
	    next;
	  }

	  my $referenceString = $searchResult->{referenceString};
	  $referenceString =~ s#PMID (\d+)#<a href="http://www.ncbi.nlm.nih.gov/pubmed/?term=$1">PMID $1</a>#;

	  my $pmid = $1;
	  if ( $exceptions && $exceptions->{$values->[0]} && $exceptions->{$values->[0]} eq $pmid ) {
	    print STDERR "INFO: Excluding known exception $values->[0] =/=> $pmid\n";
	    next;
	  }

	  $buffer .= "<B>Dataset title:</B> $values->[5]<BR>";
	  $buffer .= "<B>Possible reference:</B> $referenceString\n";
	  $stats{"Datasets of status '$values->[6]' with a possible article found"}++;
	  print $buffer;
	}

	print "<BR><BR><HR><BR>Summary of results:<BR>\n";
	foreach my $key ( sort keys(%stats) ) {
	  print "$stats{$key} $key<BR>\n";
	}
	print "<BR><BR>\n";


      } elsif($line =~ /<\/body/){
        print "$line\n";
      } else{
        print "$line\n";
      }
    }

  #### Print the result in XML
  } elsif($outputMode=~ /xml/i){
     print "Content-type:text/xml\r\n\r\n";
     my $writer = new XML::Writer(DATA_MODE => 1, DATA_INDENT => 4,ENCODING=>'UTF-8',);
     $writer->xmlDecl("UTF-8");
     $writer->startTag("ProteomeXchangeDataset",
        "xmlns:xsi"=>"http://www.w3.org/2001/XMLSchema-instance",
        "xsi:noNamespaceSchemaLocation"=>"proteomeXchange-draft-05.xsd",
        "formatVersion"=>"1.0.0",
      );

     foreach my $values (@results) {
       $headings[0] =~ s/\s+/_/g; 
       $writer->startTag($headings[0], ,id=>"$values->[0]");
       for (my $i=1;$i<=$#headings;$i++){
        $headings[$i] =~ s/\s+/_/g;
        $writer->startTag($headings[$i],);
        $writer->characters($values->[$i]);
        $writer->endTag($headings[$i]);
       }
       $writer->endTag($headings[0]);
     } 
     $writer->endTag("ProteomeXchangeDataset");
     $writer->end();

  #### Print the result as a TSV table
  } elsif($outputMode=~ /tsv/i){
    print "Content-type:text/plain\r\n\r\n";
    foreach my $h (@headings){
     print "$h\t";
    }
    print "\n";
    foreach my $values (@results){
     print join("\t", @$values);
     print "\n";
   }
  }
}


###############################################################################
# build_SQL_columns_list
###############################################################################
sub build_SQL_columns_list {
  my %args = @_;
  my $METHOD = 'build_SQL_columns_list';
  #### Process the arguments list
  my $column_array_ref = $args{'column_array_ref'} ||
    die "$METHOD: column_array_ref not passed!";
  my $hidden_cols_ref = $args{'hidden_cols_ref'};
  my $heading = $args{'heading'};

  my $columns_clause = "";
  my $element;
  foreach $element (@{$column_array_ref}) {
    next if ( defined $hidden_cols_ref->{$element->[1]});
    $columns_clause .= "," if ($columns_clause);
    $columns_clause .= "$element->[0]";

    push @$heading , $element->[1];
  }
  #### Return result
  return $columns_clause;

} # end build_SQL_columns_list


###############################################################################
# searchUnannouncedDatasets
###############################################################################
sub searchUnannouncedDatasets {
  my %args = @_;
  my $SUB_NAME = 'searchUnannouncedDatasets';
   
  #### Decode the argument list
  my $params = $args{'params'}; 
  my $response = $args{'response'} || die("[$SUB_NAME] ERROR: response not passed");
  my $exceptions = $args{'exceptions'}; 

  my $test = $params->{test} || 'no';
  my $outputMode=$params->{outputMode} || 'html';
  my $table_name = 'dataset';
  my $teststr = '';

  if ($test && ($test =~ /yes/i || $test =~ /true/i)){
    $teststr = "&test=$test";
    $table_name = 'dataset_test' 
  }

  my $dbh = new ProteomeXchange::Database;
  my $whereclause = 'WHERE status = "ID requested"';
  my %hidden_cols = ();
  my @headings = (); 

  my  @column_array =(
        ["datasetIdentifier","Dataset Identifier"],
        ["PXPartner","Repository"],
        ["status","Status"],
        ["primarySubmitter","Primary Submitter"],
        ["labHead", "LabHead"],
        ["title","Title"],
        ["publication","Publication"],
        );

  my $columns_clause =  build_SQL_columns_list(
       	column_array_ref=>\@column_array,
        hidden_cols_ref => \%hidden_cols,
        heading => \@headings);

  my $sql = qq~ select
        $columns_clause 
        from $table_name
        $whereclause
        ORDER BY datasetIdentifier DESC
  ~;

  my @results = $dbh->selectSeveralColumns($sql);

  if ($outputMode =~ /html/i){
    #print "Content-type:text/html\r\n\r\n";
    foreach my $line (@page){

      if ($line =~ /(TEMPLATESUBTITLE|TEMPLATETITLE)/){
	$line =~ s/$1/ProteomeXchange Datasets/;
	print "$line\n";

      } elsif($line =~ /class="node-inner-padding"/){
	#$line =~ s/>/style="padding: 0">/g;
	print "$line\n";

      } elsif ($line =~ /^<!-- BEGIN main content -->/){
	print "$line\n";

	my ($date) = `date`;
	print "<H1>Last refresh: $date</H1>\n";

	print "<H1>Articles in PubMed that reference a PXD that has not been announced</H1>\n";

	#### Iterate through the datasets, looking for possible matches
	my $counter = 0;
	my %stats;
	foreach my $values (@results){
	  $counter++;
	  #last if ($counter > 200);
	  #next unless ($values->[0] eq 'PXD000246');

	  my $buffer ='';

	  $buffer .= "<HR>\n";
	  $buffer .= "<a href=\"http://proteomecentral.proteomexchange.org/dataset/$values->[0]\">$values->[0]</a> \t".($values->[6]||'')." (from $values->[1])<BR>\n";

	  #print "Searching for $values->[0] ($values->[2])<BR>\n";

	  my $searchResult = $articleFinder->findArticle(abstract=>$values->[0]);

	  #### If nothing was found
	  if ( $searchResult->{message} eq 'No articles found' || !defined($searchResult->{year}) || $searchResult->{year} < 2012) {
	    $stats{"Datasets of status '$values->[2]' with no articles found"}++;
	    next;
	  }

	  my $title = $values->[5] || '';

	  my $referenceString = $searchResult->{referenceString};
	  $referenceString =~ s#PMID (\d+)#<a href="http://www.ncbi.nlm.nih.gov/pubmed/?term=$1">PMID $1</a>#;

	  my $pmid = $1;
	  if ( $exceptions && $exceptions->{$values->[0]} && $exceptions->{$values->[0]} eq $pmid ) {
	    print STDERR "INFO: Excluding known exception $values->[0] =/=> $pmid\n";
	    next;
	  }

	  $buffer .= "<B>Dataset title:</B> $title<BR>";
	  $buffer .= "<B>Possible reference:</B> $referenceString\n";
	  $stats{"Datasets of status '$values->[2]' with a possible article found"}++;
	  print $buffer;
	}

	print "<BR><BR><HR><BR>Summary of results:<BR>\n";
	foreach my $key ( sort keys(%stats) ) {
	  print "$stats{$key} $key<BR>\n";
	}
	print "<BR><BR>\n";


      } elsif($line =~ /END main content/){
        last;
      } elsif($line =~ /<\/body/){
        print "$line\n";
      } else{
        print "$line\n";
      }
    }

  #### Print the result in XML
  } elsif($outputMode=~ /xml/i){
     print "Content-type:text/xml\r\n\r\n";
     my $writer = new XML::Writer(DATA_MODE => 1, DATA_INDENT => 4,ENCODING=>'UTF-8',);
     $writer->xmlDecl("UTF-8");
     $writer->startTag("ProteomeXchangeDataset",
        "xmlns:xsi"=>"http://www.w3.org/2001/XMLSchema-instance",
        "xsi:noNamespaceSchemaLocation"=>"proteomeXchange-draft-05.xsd",
        "formatVersion"=>"1.0.0",
      );

     foreach my $values (@results) {
       $headings[0] =~ s/\s+/_/g; 
       $writer->startTag($headings[0], ,id=>"$values->[0]");
       for (my $i=1;$i<=$#headings;$i++){
        $headings[$i] =~ s/\s+/_/g;
        $writer->startTag($headings[$i],);
        $writer->characters($values->[$i]);
        $writer->endTag($headings[$i]);
       }
       $writer->endTag($headings[0]);
     } 
     $writer->endTag("ProteomeXchangeDataset");
     $writer->end();

  #### Print the result as a TSV table
  } elsif($outputMode=~ /tsv/i){
    print "Content-type:text/plain\r\n\r\n";
    foreach my $h (@headings){
     print "$h\t";
    }
    print "\n";
    foreach my $values (@results){
     print join("\t", @$values);
     print "\n";
   }
  }
}


###############################################################################
# fetchExceptions
###############################################################################
sub fetchExceptions {

  my $maxRows = 10;
  my $requestRows = $maxRows+1;

  my $googleApiKey = $CONFIG{googleApiKey} || '??';

  my $url = "https://sheets.googleapis.com/v4/spreadsheets/1PNAwAWQFxzcIRO8Hmh3vI0hasbHQYR0zcb0k6zr26Mk/values/Sheet1\!A1:D${requestRows}/?key=$googleApiKey";

  my $request = HTTP::Request->new( 'GET', $url );
  my $lwp = LWP::UserAgent->new;
  my $lwp_response = $lwp->request( $request );

  my %exceptions = ();

  if ( $lwp_response->is_success() ) {
    my $response = JSON::Parse::parse_json($lwp_response->content());
    if ( $response->{'values'} ) {
      my @rows = @{$response->{'values'}};
      my $iRow = 0;
      foreach my $row (@rows) {
        my $id = $row->[0] || '??';
        my $pmid = $row->[1] || '??';
	if ( $iRow == 0 ) {
	  if ( $id ne "PXD identifier" ) {
	    print "ERROR: First column is not 'PXD identifier'\n";
	    last;
	  }
	  if ( $pmid ne "PMID to exclude" ) {
	    print "ERROR: Second column is not 'PMID to exclude'\n";
	    last;
	  }
        } else {
	  $id =~ s/\s//g;
	  if ( $id =~ /^PXD(\d+)$/ ) {
	    my $number = $1;
	    if ( length($id) < 9 ) {
	      my $pad = "00000000000000";
	      $id = "PXD".substr($pad,0,6-length($number)).$number;
	    }
          } else {
	    print "ERROR: Invalid identifier $id\n";
          }
	  $exceptions{$id} = $pmid;
        }
	#print "$id\t$pmid\n";
	$iRow++;
      }
      if ( $iRow >= $maxRows ) {
	print STDERR "WARNING: Read in $iRow rows, but this is maxRows, so there might be more. Check the sheet and extend maxRows\n";
      }
    } else {
      print($response->{message}."\n")
    }
  
  } else {
    print("ERROR: " . $lwp_response->status_line());
  }
  

  return \%exceptions;

}

